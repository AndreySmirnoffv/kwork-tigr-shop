import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
import { findUserByIdentifier } from '@models/user.model';
import { tokenConfig } from 'src/configs/jwt.token.config';
import { generateAccessToken, setAuthCookies } from '@utils/jwt';

dotenv.config();

export async function authMiddleware(req: Request, res: Response, next: NextFunction): Promise<any> {
  const accessToken = req.cookies['access_token'];
  const refreshToken = req.cookies['refresh_token'];
  const decoded = jwt.verify(refreshToken, tokenConfig.refresh.secret) as any;

  console.log(decoded)

  console.log('accessToken middleware:', accessToken);
  console.log('refreshToken:', refreshToken);

  if (!accessToken && !refreshToken) {
    console.error('‚ùå –¢–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    return res.status(401).json({ valid: false, message: '–¢–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' });
  }

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ accessToken
  if (accessToken) {
    try {
      jwt.verify(accessToken, tokenConfig.access.secret);
      return next(); // –í—Å—ë –æ–∫ ‚Äî –ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
    } catch (err) {
      console.error(err)
      console.warn('‚ö†Ô∏è Access token –∏—Å—Ç—ë–∫ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
    }
  }

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ refreshToken –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ accessToken
  if (refreshToken) {
    try {


      if (!decoded) {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ refresh token');
        return res.status(401).json({ valid: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π accessToken
      const newAccessToken = generateAccessToken({ email: decoded.email, userId: decoded.userId });

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–∫—É
      setAuthCookies(res, { accessToken: newAccessToken });

      console.log('üîÑ Access token –æ–±–Ω–æ–≤–ª—ë–Ω —á–µ—Ä–µ–∑ refresh');
      return next(); // –ü—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ

    } catch (refreshError) {
      console.error('‚ùå Refresh token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
      return res.status(401).json({ valid: false, message: 'Refresh token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' });
    }
  }

  return res.status(401).json({ valid: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è' });
}