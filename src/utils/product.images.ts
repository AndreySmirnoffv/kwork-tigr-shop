import { prisma } from '@services/prisma.service.js';
import * as fs from 'fs';
import * as path from 'path';
import chalk from 'chalk';

const PHOTOS_BASE_PATH = path.resolve('images/–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞');

interface SyncResult {
  totalProducts: number;
  matchedProducts: number;
  createdImages: number;
  errors: number;
}

async function syncProductImages() {
  const result: SyncResult = {
    totalProducts: 0,
    matchedProducts: 0,
    createdImages: 0,
    errors: 0
  };

  try {
    console.log(chalk.bold.cyan('\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–æ–≤\n'));
    console.log(chalk.gray('='.repeat(60)));

    const products = await prisma.product.findMany({
      select: {
        id: true,
        brand: true,
        originalTitle: true
      }
    });

    result.totalProducts = products.length;

    await prisma.productImage.deleteMany();

    for (const product of products) {
      try {
        if (!product.originalTitle) {
          console.log(chalk.yellow(`‚ö†Ô∏è –¢–æ–≤–∞—Ä ${product.id} –±–µ–∑ originalTitle`));
          continue;
        }

        const brandPath = path.join(PHOTOS_BASE_PATH, product.brand);
        const productPath = path.join(brandPath, product.originalTitle);

        if (!fs.existsSync(productPath)) {
          console.log(chalk.yellow(`‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${productPath}`));
          continue;
        }

        const imageFiles = fs.readdirSync(productPath)
          .filter(file => ['.jpg', '.jpeg', '.png', '.webp']
            .includes(path.extname(file).toLowerCase()))
          .map(file => path.join(productPath, file));

        if (imageFiles.length === 0) {
          console.log(chalk.yellow(`‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤: ${productPath}`));
          continue;
        }

        for (const imagePath of imageFiles) {
          try {
            const imageData = fs.readFileSync(imagePath);
            await prisma.productImage.create({
              data: {
                data: imageData.toString('base64'),
                mimeType: getMimeType(imagePath),
                productId: product.id
              }
            });
            result.createdImages++;
          } catch (error) {
            console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${path.basename(imagePath)}`), error);
            result.errors++;
          }
        }

        console.log(chalk.green(`‚úÖ ${product.originalTitle}: ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`));
        result.matchedProducts++;

      } catch (error) {
        console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞ —Ç–æ–≤–∞—Ä–∞ ${product.id}`), error);
        result.errors++;
      }
    }

    printSyncResult(result);

  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:'), error);
  } finally {
    await prisma.$disconnect();
  }
}

function getMimeType(filePath: string): string {
  const ext = path.extname(filePath).toLowerCase();
  switch (ext) {
    case '.png': return 'image/png';
    case '.webp': return 'image/webp';
    default: return 'image/jpeg';
  }
}

function printSyncResult(result: SyncResult) {
  console.log(chalk.bold.cyan('\n' + '='.repeat(60)));
  console.log(chalk.bold('üìä –ò—Ç–æ–≥–∏:'));
  console.log(`   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${result.totalProducts}`);
  console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.matchedProducts}`);
  console.log(chalk.green(`   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${result.createdImages}`));
  console.log(chalk.red(`   –û—à–∏–±–æ–∫: ${result.errors}`));
  console.log(chalk.gray('='.repeat(60)));
}

await syncProductImages()
  .then(() => console.log(chalk.green('\n‚úî –ì–æ—Ç–æ–≤–æ')))
  .catch(err => console.error(chalk.red('‚úñ –û—à–∏–±–∫–∞:'), err));