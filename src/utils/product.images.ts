import { prisma } from '@services/prisma.service.js';
import * as fs from 'fs';
import * as path from 'path';
import chalk from 'chalk';

const PHOTOS_BASE_PATH = path.resolve('images/–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞');
const PHOTOS_PREVIEW_BASE_PATH = path.resolve('images/–û–±–ª–æ–∂–∫–∏')

interface SyncResult {
  totalProducts: number;
  matchedProducts: number;
  createdImages: number;
  errors: number;
}

async function syncProductImages() {
  const result: SyncResult = {
    totalProducts: 0,
    matchedProducts: 0,
    createdImages: 0,
    errors: 0
  };

  try {
    console.log(chalk.bold.cyan('\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–æ–≤\n'));
    console.log(chalk.gray('='.repeat(60)));

    const products = await prisma.product.findMany({
      select: {
        id: true,
        brand: true,
        originalTitle: true
      }
    });

    result.totalProducts = products.length;

    await prisma.productImage.deleteMany();

    for (const product of products) {
      try {
        if (!product.originalTitle) {
          console.log(chalk.yellow(`‚ö†Ô∏è –¢–æ–≤–∞—Ä ${product.id} –±–µ–∑ originalTitle`));
          continue;
        }

        const brandPath = path.join(PHOTOS_BASE_PATH, product.brand);
        const productPath = path.join(brandPath, product.originalTitle);

        if (!fs.existsSync(productPath)) {
          console.log(chalk.yellow(`‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${productPath}`));
          continue;
        }

        const imageFiles = fs.readdirSync(productPath)
          .filter(file => ['.jpg', '.jpeg', '.png', '.webp']
            .includes(path.extname(file).toLowerCase()))
          .map(file => path.join(productPath, file));

        if (imageFiles.length === 0) {
          console.log(chalk.yellow(`‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤: ${productPath}`));
          continue;
        }

        for (const imagePath of imageFiles) {
          try {
            const imageData = fs.readFileSync(imagePath);
            await prisma.productImage.create({
              data: {
                data: imageData.toString('base64'),
                mimeType: getMimeType(imagePath),
                productId: product.id
              }
            });
            result.createdImages++;
          } catch (error) {
            console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${path.basename(imagePath)}`), error);
            result.errors++;
          }
        }

        console.log(chalk.green(`‚úÖ ${product.originalTitle}: ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`));
        result.matchedProducts++;

      } catch (error) {
        console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞ —Ç–æ–≤–∞—Ä–∞ ${product.id}`), error);
        result.errors++;
      }
    }

    printSyncResult(result);

  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:'), error);
  } finally {
    await prisma.$disconnect();
  }
}

function getMimeType(filePath: string): string {
  const ext = path.extname(filePath).toLowerCase();
  switch (ext) {
    case '.png': return 'image/png';
    case '.webp': return 'image/webp';
    default: return 'image/jpeg';
  }
}

function printSyncResult(result: SyncResult) {
  console.log(chalk.bold.cyan('\n' + '='.repeat(60)));
  console.log(chalk.bold('üìä –ò—Ç–æ–≥–∏:'));
  console.log(`   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${result.totalProducts}`);
  console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.matchedProducts}`);
  console.log(chalk.green(`   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${result.createdImages}`));
  console.log(chalk.red(`   –û—à–∏–±–æ–∫: ${result.errors}`));
  console.log(chalk.gray('='.repeat(60)));
}


async function insertProductPreviewImages() {
  try {
    console.log(chalk.cyan('\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–ª–æ–∂–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤'));
    console.log(chalk.gray('='.repeat(60)));

    await prisma.productPreviewImage.deleteMany();

    const products = await prisma.product.findMany({
      select: {
        id: true,
        brand: true,
        originalTitle: true
      }
    });

    for (const product of products) {
      if (!product.originalTitle || !product.brand) {
        console.log(chalk.yellow(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç originalTitle –∏–ª–∏ brand —É —Ç–æ–≤–∞—Ä–∞ ${product.id}`));
        continue;
      }

      const brandFolder = path.join(PHOTOS_PREVIEW_BASE_PATH, product.brand);

      if (!fs.existsSync(brandFolder)) {
        console.log(chalk.red(`‚ùå –ü–∞–ø–∫–∞ –±—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${brandFolder}`));
        continue;
      }

      let cleanTitle = product.originalTitle.trim();

      // –£–¥–∞–ª—è–µ–º –±—Ä–µ–Ω–¥ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
      if (cleanTitle.toLowerCase().startsWith(product.brand.toLowerCase())) {
        cleanTitle = cleanTitle.substring(product.brand.length).trim();
      }

      const previewFileBase = `${cleanTitle} 0`;
      const possibleExtensions = ['.jpg', '.jpeg', '.png', '.webp', '.JPG', '.JPEG', '.PNG', '.WEBP'];

      let previewPath: string | null = null;

      for (const ext of possibleExtensions) {
        const candidatePath = path.join(brandFolder, previewFileBase + ext);
        if (fs.existsSync(candidatePath)) {
          previewPath = candidatePath;
          break;
        }
      }

      if (!previewPath) {
        console.log(chalk.yellow(`‚ö†Ô∏è –û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è: ${product.originalTitle}`));
        console.log(chalk.gray(`üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ ${brandFolder}:`));
        const files = fs.readdirSync(brandFolder);
        for (const file of files) console.log('   -', file);
        continue;
      }

      try {
        const imageData = fs.readFileSync(previewPath);
        await prisma.productPreviewImage.create({
          data: {
            data: imageData.toString('base64'),
            mimeType: getMimeType(previewPath),
            productId: product.id
          }
        });
        console.log(chalk.green(`‚úÖ –û–±–ª–æ–∂–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${product.originalTitle}`));
      } catch (error) {
        console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏: ${product.originalTitle}`), error);
      }
    }

    console.log(chalk.cyan('\n‚úîÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–ª–æ–∂–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'));
    console.log(chalk.gray('='.repeat(60)));
  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –≤ insertProductPreviewImages:'), error);
  } finally {
    await prisma.$disconnect();
  }
}

await insertProductPreviewImages()

await syncProductImages()
  .then(() => console.log(chalk.green('\n‚úî –ì–æ—Ç–æ–≤–æ')))
  .catch(err => console.error(chalk.red('‚úñ –û—à–∏–±–∫–∞:'), err));